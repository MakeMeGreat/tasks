package com.example.tasks.task4

/*
Сначала задаю уточняющие вопросы:
- Какое это приложение, чтото типа телеграмма или внутренний чат для работников. (ответ : допустим внутренний чат)
- Сколько пользователей в месяц (10000)
- Нужны ли голосовые сообщения (нет)
- нужны ли реакции на сообщения(нет)
- Нужно ли делать кеш(да)
- Нужны ли групповые чаты(нет)

Строю такой лист требований:
functional:
- выводить список чатов
- сообщения одного чата
- отправлять и получать сообщения

non-functional:
- кеш
- уведомления

out-of-scope:
- голосовые сообщения
- реакции на сообщения
- редактирование сообщений
- групповые чаты

Строю верхнеуровневую схему:
*Тут картинка, что я скинул в лс*

Объясняю какие либы использовал бы:
- API - Retrofit (отправлять и получать сообщения с сервера)
- Cache - Room (чтобы кешировать сообщения)
- DI - Dagger2 (сделать внедрение зависимостей)
- paginator - скорее всего какое нибудь свое решение.
- UI - выстраивал бы на MVI
(На самом деле выбор таких либ просто потому, что я другие не юзал)

Объясняю подробности:
- вообще сам DI нужен чтобы чтобы уменьшить связанность кода,
 улучшить тестируемость и поддерживаемость.
 Dagger потому что позволяет более тонко настроить сам DI и предоставляет больше возможностей
- пагинатор нужен чтобы сразу не грузить весь список сообщений и чатов,
 а делать это по частям. Это поможет снизить нагрузку на устройство,
 будет меньше лагов и лучше UX
- MVI - позволяет хранить только один стейт,
 отправлять события в один метод, который уже будет их
 обрабатывать, можно выстроить UDF. Такой код будет легче понимать и поддерживать

 API и Cache использовали бы примерно такие модели данных:
class Message {
	val id
	val chat_id
	val text
	val created_at
	val status
}

class User {
	val id
	val name
	val avatar_picture
}

class Chat {
	val id
	val chat_picture
	val last_message
}

Когда эти модели прокидываются между слоями (Data Domain Presentation),
 то маппятся в модель соответствующего слоя. Это поможет соблюсти чистую архитектуру.
 Что так же важно для поддержки и улучшения приложения

 */